# -*- coding: utf-8 -*-
"""Esperienza5_GarageBand.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17t_iSex9c51hH1OdsuN35yayN_6EQriD

Laboratorio di Elettronica e Tecniche di Acquisizione Dati

#Esperienza 5: GarageBand

*Laura Francesca Iacob \\
Sara Pieri \\
Sara Schippa*
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import fft
from scipy import optimize
#import soundcard as sc

#Funzione di fit dello spettro di potenza
def fit(x, k, beta):
  return k/pow(x,beta)

"""##FASE I: Filtraggio del rumore sinusoidale

###Estrazione dei dati del segnale
"""

#Leggo i dati dal file di testo
nn=['t', 'A']
tab1=pd.read_csv('https://www.fisgeo.unipg.it/~duranti/laboratoriodue/laboratorio_24-25/_slides/data1.txt', header=None, names=nn, sep='\t')
tab2=pd.read_csv('https://www.fisgeo.unipg.it/~duranti/laboratoriodue/laboratorio_24-25/_slides/data2.txt', header=None, names=nn, sep='\t')
tab3=pd.read_csv('https://www.fisgeo.unipg.it/~duranti/laboratoriodue/laboratorio_24-25/_slides/data3.txt', header=None, names=nn, sep='\t')

t1=tab1['t'].values
y1=tab1['A'].values
t2=tab2['t'].values
y2=tab2['A'].values
t3=tab3['t'].values
y3=tab3['A'].values

#Riproduzione degli audio da 10 secondi (frequenza di 44100Hz)
speakers = sc.all_speakers()
default_speaker = sc.default_speaker()
print('Ascolto file audio 1')
default_speaker.play(y1/np.max(y1), samplerate=44100)
print('Ascolto file audio 2')
default_speaker.play(y2/np.max(y2), samplerate=44100)
print('Ascolto file audio 3')
default_speaker.play(y3/np.max(y3), samplerate=44100)
print("La riproduzione Ã¨ avvenuta con successo.")


#Visualizzazione delle waveforms (ampiezza che varia con il tempo)
fig, ax=plt.subplots(1,3, figsize=(30,5))
fig.suptitle('Waveforms', fontsize=35, y=1.07)
ax[0].set_title('Data1', fontsize=25)
ax[0].plot(t1, y1, color='cornflowerblue')
ax[0].set_xlim(0, 0.3)
ax[0].set_xlabel('Time [s]', fontsize=20)
ax[0].set_ylabel('Amplitude [UA]', fontsize=20)
ax[1].set_title('Data2', fontsize=25)
ax[1].plot(t2, y2, color='mediumseagreen')
ax[1].set_xlim(0, 0.2)
ax[1].set_xlabel('Time [s]', fontsize=20)
ax[1].set_ylabel('Amplitude [UA]', fontsize=20)
ax[2].set_title('Data3', fontsize=25)
ax[2].plot(t3, y3, color='lightcoral')
ax[2].set_xlim(0, 0.5)
ax[2].set_xlabel('Time [s]', fontsize=20)
ax[2].set_ylabel('Amplitude [UA]', fontsize=20)
ins_ax=ax[1].inset_axes([0.7,0.7,0.3,0.3])
ins_ax.plot(t2, y2, color='mediumseagreen')
ins_ax.set_xlim(-0.002, 0.028)
ins_ax.set_ylim(0.75, 1.09)
plt.show()

"""###Analisi di Fourier"""

#ANALISI DI FOURIER Data1
c1=fft.fft(y1)
freq1=fft.fftfreq(len(y1), d=(t1[1]-t1[0]))
r1=c1.real #parte reale
i1=c1.imag #parte immaginaria
p1=np.absolute(c1)**2 #potenza
antiy1=fft.ifft(c1, n=len(c1))

fig, ax=plt.subplots(1, 3, figsize=(30,5))
fig.suptitle('Fourier Analysis: Data1', fontsize=35, y=1.05)
ax[0].set_title('Parte reale', fontsize=25)
ax[0].plot(freq1[:len(freq1)//2], r1[:len(c1)//2], color='cornflowerblue')
ax[0].set_xlim(0, 1000)
ax[0].grid(linestyle=':')
ax[0].set_xlabel('Frequenza [Hz]', fontsize=20)
ax[0].set_ylabel('Re(C_k) [UA]', fontsize=20)
ax[1].set_title('Parte immaginaria', fontsize=25)
ax[1].plot(freq1[:len(freq1)//2], i1[:len(c1)//2], color='cornflowerblue')
ax[1].set_xlim(0, 1000)
ax[1].grid(linestyle=':')
ax[1].set_xlabel('Frequenza [Hz]', fontsize=20)
ax[1].set_ylabel('Im(C_k) [UA]', fontsize=20)
ax[2].set_title('Spettro di potenza', fontsize=25)
ax[2].plot(freq1[:len(freq1)//2], p1[:len(c1)//2], color='cornflowerblue')
ax[2].set_xlim(0, 1000)
ax[2].grid(linestyle=':')
ax[2].set_xlabel('Frequenza [Hz]', fontsize=20)
ax[2].set_ylabel('|C_k|^2 [UA]', fontsize=20)
plt.show()

#ANALISI DI FOURIER Data2
c2=fft.fft(y2)
freq2=fft.fftfreq(len(y2), d=(t2[1]-t2[0]))
r2=c2.real #parte reale
i2=c2.imag #parte immaginaria
p2=np.absolute(c2)**2 #potenza
antiy2=fft.ifft(c2, n=len(c2))

fig, ax=plt.subplots(1, 3, figsize=(30,5))
fig.suptitle('Fourier Analysis: Data2', fontsize=35, y=1.05)
ax[0].set_title('Parte reale', fontsize=25)
ax[0].plot(freq2[:len(freq2)//2], r2[:len(c2)//2], color='mediumseagreen')
ax[0].set_xlim(0, 2000)
ax[0].grid(linestyle=':')
ax[0].set_xlabel('Frequenza [Hz]', fontsize=20)
ax[0].set_ylabel('Re(C_k) [UA]', fontsize=20)
ax[1].set_title('Parte immaginaria', fontsize=25)
ax[1].plot(freq2[:len(freq2)//2], i2[:len(c2)//2], color='mediumseagreen')
ax[1].set_xlim(-200, 3000)
ax[1].grid(linestyle=':')
ax[1].set_xlabel('Frequenza [Hz]', fontsize=20)
ax[1].set_ylabel('Im(C_k) [UA]', fontsize=20)
ax[2].set_title('Spettro di potenza', fontsize=25)
ax[2].plot(freq2[:len(freq2)//2], p2[:len(c2)//2], color='mediumseagreen')
ax[2].set_xlim(-100, 1200)
ax[2].grid(linestyle=':')
ax[2].set_xlabel('Frequenza [Hz]', fontsize=20)
ax[2].set_ylabel('|C_k|^2 [UA]', fontsize=20)
plt.show()

#ANALISI DI FOURIER Data3
c3=fft.fft(y3)
freq3=fft.fftfreq(len(y3), d=(t3[1]-t3[0]))
r3=c3.real #parte reale
i3=c3.imag #parte immaginaria
p3=np.absolute(c3)**2 #potenza
antiy3=fft.ifft(c3, n=len(c3))

fig, ax=plt.subplots(1, 3, figsize=(30,5))
fig.suptitle('Fourier Analysis: Data3', fontsize=35, y=1.05)
ax[0].set_title('Parte reale', fontsize=25)
ax[0].plot(freq3[:len(freq3)//2], r3[:len(c3)//2], color='lightcoral')
ax[0].set_xlim(-500, 5000)
ax[0].grid(linestyle=':')
ax[0].set_xlabel('Frequenza [Hz]', fontsize=20)
ax[0].set_ylabel('Re(C_k) [UA]', fontsize=20)
ax[1].set_title('Parte immaginaria', fontsize=25)
ax[1].plot(freq3[:len(freq3)//2], i3[:len(c3)//2], color='lightcoral')
ax[1].grid(linestyle=':')
ax[1].set_xlabel('Frequenza [Hz]', fontsize=20)
ax[1].set_ylabel('Im(C_k) [UA]', fontsize=20)
ax[2].set_title('Spettro di potenza', fontsize=25)
ax[2].plot(freq3[:len(freq3)//2], p3[:len(c3)//2], color='lightcoral')
ax[2].set_xlim(-500, 15000)
ax[2].grid(linestyle=':')
ax[2].set_xlabel('Frequenza [Hz]', fontsize=20)
ax[2].set_ylabel('|C_k|^2 [UA]', fontsize=20)
plt.show()

#Antitrasformate
#Trattazione: parlare della fase che non dobbiamo annullare#
fig, ax=plt.subplots(1, 3, figsize=(30,5))
fig.suptitle('Inverse Fourier transfor', fontsize=35, y=1.05)
ax[0].set_title('Antitrasformata Data1', fontsize=25)
ax[0].plot(t1, antiy1, color='cornflowerblue')
ax[0].set_xlim(0, 0.3)
ax[0].set_xlabel('Time [s]', fontsize=20)
ax[0].set_ylabel('Amplitude [UA]', fontsize=20)
ax[1].set_title('Antitrasformata Data2', fontsize=25)
ax[1].plot(t2, antiy2, color='mediumseagreen')
ax[1].set_xlim(0, 0.2)
ax[1].set_xlabel('Time [s]', fontsize=20)
ax[1].set_ylabel('Amplitude [UA]', fontsize=20)
ax[2].set_title('Antitrasformata Data3', fontsize=25)
ax[2].plot(t3, antiy3, color='lightcoral')
ax[2].set_xlim(0, 0.5)
ax[2].set_xlabel('Time [s]', fontsize=20)
ax[2].set_ylabel('Amplitude [UA]', fontsize=20)
plt.show()

"""###Filtraggio del rumore sinusoidale"""
#Filtraggio con maschera di rumore sinusoidale a occhio (picco isolato su parte o reale o immaginaria)
mask1=p1>2e10
c1_nul=c1.copy()
c1_nul[mask1]=0
y1_filter=fft.ifft(c1_nul, n=len(c1))

mask2=r2<-10000
c2_nul=c2.copy()
c2_nul[mask2]=0
y2_filter=fft.ifft(c2_nul, n=len(c2))

mask3=r3>20000
c3_nul=c3.copy()
c3_nul[mask3]=0
y3_filter=fft.ifft(c3_nul, n=len(c3))


#Antitrasformate filtrate
fig, ax=plt.subplots(1, 3, figsize=(30,5))
fig.suptitle('Inverse Fourier transform: applied filter', fontsize=35, y=1.05)
ax[0].set_title('Antitrasformata filtrata Data1', fontsize=25)
ax[0].plot(t1, y1_filter, color='salmon')
ax[0].set_xlim(0, 0.15)
ax[0].set_xlabel('Time [s]', fontsize=20)
ax[0].set_ylabel('Amplitude [UA]', fontsize=20)
ax[1].set_title('Antitrasformata filtrata Data2', fontsize=25)
ax[1].plot(t2, y2_filter, color='m')
ax[1].set_xlim(0, 0.2)
ax[1].set_xlabel('Time [s]', fontsize=20)
ax[1].set_ylabel('Amplitude [UA]', fontsize=20)
ax[2].set_title('Antitrasformata filtrata Data3', fontsize=25)
ax[2].plot(t3, y3_filter, color='royalblue')
ax[2].set_xlim(0, 0.2)
ax[2].set_xlabel('Time [s]', fontsize=20)
ax[2].set_ylabel('Amplitude [UA]', fontsize=20)
ins_ax=ax[2].inset_axes([0.7,0.7,0.3,0.3])
ins_ax.plot (t3, y3_filter, color='royalblue')
ins_ax.set_xlim(-0.0001, 0.0036)
plt.show()

#Confronto segnale filtrato e non
fig, ax=plt.subplots(1, 3, figsize=(30,5))
fig.suptitle('Inverse Fourier transform: comparison filter on/off', fontsize=35, y=1.05)
ax[0].set_title('Antitrasformata Data1', fontsize=25)
ax[0].plot(t1, y1, color='cornflowerblue', label='Original', lw=2)
ax[0].plot(t1, y1_filter, color='salmon', label='Filtered', lw=2)
ax[0].set_xlim(0, 0.07)
ax[0].set_xlabel('Time [s]', fontsize=20)
ax[0].set_ylabel('Amplitude [UA]', fontsize=20)
ax[0].legend(fontsize=16)
ax[1].set_title('Antitrasformata Data2', fontsize=25)
ax[1].plot(t2, y2, color='mediumseagreen', label='Original')
ax[1].plot(t2, y2_filter, color='m', label='Filtered')
ax[1].set_xlim(0, 0.15)
ax[1].set_xlabel('Time [s]', fontsize=20)
ax[1].set_ylabel('Amplitude [UA]', fontsize=20)
ax[1].legend(fontsize=16)
ax[2].set_title('Antitrasformata Data3', fontsize=25)
ax[2].plot(t3, y3_filter, color='royalblue', label='Filtered', alpha=0.5)
ax[2].plot(t3, y3, color='lightcoral', label='Original', alpha=0.5)
ax[2].set_xlim(0, 0.3)
ax[2].set_xlabel('Time [s]', fontsize=20)
ax[2].set_ylabel('Amplitude [UA]', fontsize=20)
ax[2].legend(fontsize=16, loc='center left')
plt.show()

"""###Fit lineare spettro di potenza: Data2"""
#Filtraggio opportuno per togliere rumori ulteriori
mask2_compl=r2>-10000
freq2_filter=freq2[mask2_compl]
p2_filter=p2[mask2_compl]
mask2_0=p2_filter!=0
freq2_filter=freq2_filter[mask2_0]
p2_filter=p2_filter[mask2_0]

mask22=p2_filter<1e5
p22_filter=p2_filter.copy()
p22_filter[mask22]=0
freq22_filter=freq2_filter.copy()
freq22_filter[mask22]=0
indices=[]
for i in range(0, len(p22_filter)):
  if freq22_filter[i]==0:
    indices.append(i)
freq22_filter=np.delete(freq22_filter, indices)
p22_filter=np.delete(p22_filter, indices)
freq22_filter=freq22_filter[:300]
p22_filter=p22_filter[:300]


#Estrazione dei parametri del fit
'''
Si osservi che il primo segnale Ã¨ una sinusoide palese, per cui il fit non avrebbe significato e nemmeno senso:
c'Ã¨ un'unica armonica giÃ  nota, basta quel termine per conoscere il segnale per intero.
Nel caso Data2, invece, si studia l'andamento dello spettro. Ovviamente, si guardano i valori giÃ  filtrati dal rumore in seno.
Poi se ne visualizza il fit lineare in scala logaritmica.
'''
par2, pcov2 = optimize.curve_fit(fit, xdata=freq22_filter, ydata=p22_filter, p0=[1e10, 1], absolute_sigma=True)
print('DATA2 (quadra) _ Parametri estratti dal fit: ', par2)
fit2=fit(freq22_filter, par2[0], par2[1])

#Confronto fit spettro di potenza
plt.figure(figsize=(22,5))
plt.title('Spettro di potenza e Fit: Data2', fontsize=35)
plt.plot(freq2_filter, p2_filter, color='m', label='Data')
plt.plot(freq22_filter, fit2, color='mediumseagreen', lw=4, label='Fit')
plt.grid(linestyle=':')
plt.ylim(1e5, 1e14)
plt.xlim(1.7e1, 10**(3.5))
plt.xscale('log')
plt.yscale('log')
plt.xlabel('Frequenza [Hz]', fontsize=25)
plt.ylabel('|C_k|^2 [UA]', fontsize=25)
plt.legend(fontsize=25)
plt.show()
