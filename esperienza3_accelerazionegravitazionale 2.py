# -*- coding: utf-8 -*-
"""Esperienza3_AccelerazioneGravitazionale

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h5oCNoGriZfq3QRpYinnNHPEzheOfj_s

Laboratorio di Elettronica e Tecniche di Acquisizione Dati

#Esperienza 3: Misura del periodo del pendolo per l'estrazione dell'accelerazione gravitazionale mediante fotodiodo e LED infrarosso

*Laura Francesca Iacob \\
Sara Pieri \\
Sara Schippa*
"""

import pandas as pd
import numpy as np
import scipy as sp
from scipy import optimize
import scipy.odr as odr
import scipy.stats as chi2
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/gdrive')

#Definizione della legge di fit lineare
def funzione_fit(p,x):
  A, B = p
  return B*x + A

#Definizione gaussiana
def gauss_func(x, A, mu, sigma):
  return A*np.exp((-(x-mu)**2)/(2*sigma**2))

"""##Fase I: Funzionamento apparato sperimentale

###Fotodiodo coperto
"""

#Estrazione dei dati provenienti da oscilloscopio
url00='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/fase1/buio_time.csv'
tab00=pd.read_csv(url00, sep=',', thousands='.')

o_t00=tab00['Time']
v00=tab00['Volt']/10

df00=pd.DataFrame(columns= ["Time (ms)", "Voltage (mV)"])
df00["Time (ms)"]=o_t00
df00["Voltage (mV)"]=v00
df00

#Realizzazione del grafico (che sta anche sull'oscilloscopio)
plt.figure(figsize=(16,7))
plt.plot(o_t00, v00, color='red')
plt.title("Segnale acquisito dall'oscilloscopio: fotodiodo coperto")
plt.tick_params(axis='x', labelsize=20)
plt.tick_params(axis='y', labelsize=20)
plt.xlabel('Tempo [ms]', fontsize=20)
plt.ylabel('Voltaggio [mV]', fontsize=20)
plt.grid()
plt.show()

"""###Rumore: LED spento"""

#Estrazione dei dati provenienti da oscilloscopio
url01='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/fase1/rumore_time.csv'
tab01=pd.read_csv(url01, sep=',', thousands='.')

o_t01=tab01['Time']
v01=tab01['Volt']/100000

df01=pd.DataFrame(columns= ["Time (ms)", "Voltage (V)"])
df01["Time (ms)"]=o_t01
df01["Voltage (V)"]=v01
df01

#Realizzazione del grafico (che sta anche sull'oscilloscopio)
plt.figure(figsize=(16,7))
plt.plot(o_t01, v01, color='red')
plt.title("Segnale acquisito dall'oscilloscopio: rumore")
plt.tick_params (axis='x', labelsize=20)
plt.tick_params(axis='y', labelsize=20)
plt.xlabel('Tempo [ms]', fontsize=20)
plt.ylabel('Voltaggio [V]', fontsize=20)
plt.grid()
plt.show()

"""###LED acceso

"""

#Estrazione dei dati provenienti da oscilloscopio
url02='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/fase1/saturazione_time.csv'
tab02=pd.read_csv(url02, thousands='.')

o_t02=tab02['Time']
v02=tab02['Volt']/100000

df02=pd.DataFrame(columns= ["Time (ms)", "Voltage (V)"])
df02["Time (ms)"]=o_t02
df02["Voltage (V)"]=v02
df02

#Realizzazione del grafico (che sta anche sull'oscilloscopio)
plt.figure(figsize=(16,7))
plt.plot(o_t02, v02, color='red')
plt.title("Segnale acquisito dall'oscilloscopio: LED acceso")
plt.tick_params (axis='x', labelsize=20)
plt.tick_params(axis='y', labelsize=20)
plt.xlabel('Tempo [ms]', fontsize=20)
plt.ylabel('Voltaggio [V]', fontsize=20)
plt.grid()
plt.show()

"""###Transizione del LED"""

#Estrazione dei dati provenienti da oscilloscopio
url03='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/fase1/transizione_time.csv'
tab03=pd.read_csv(url03, thousands='.')

o_t03=tab03['Time']/100000
v03=tab03['Volt']/100000

df03=pd.DataFrame(columns= ["Time (ms)", "Voltage (V)"])
df03["Time (ms)"]=o_t03
df03["Voltage (V)"]=v03
df03

#Realizzazione del grafico (che sta anche sull'oscilloscopio)
plt.figure(figsize=(16,7))
plt.plot(o_t03, v03, color='red')
plt.title("Segnale acquisito dall'oscilloscopio: passaggio del LED")
plt.tick_params (axis='x', labelsize=20)
plt.tick_params(axis='y', labelsize=20)
plt.xlabel('Tempo [ms]', fontsize=20)
plt.ylabel('Voltaggio [V]', fontsize=20)
plt.grid()
plt.show()

"""##Fase II: Pendolo

###Lunghezza 1
"""

#Accesso ai dati con Drive
url1='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l1/csv1_time.csv'
url2='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l1/csv2_time.csv'
url3='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l1/csv3_time.csv'
url4='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l1/csv4_time.csv'
url5='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l1/csv5_time.csv'

df1=pd.read_csv(url1, sep=',', thousands='.')
df2=pd.read_csv(url2, sep=',', thousands='.')
df3=pd.read_csv(url3, sep=',', thousands='.')
df4=pd.read_csv(url4, sep=',', thousands='.')
df5=pd.read_csv(url5, sep=',', thousands='.')



#Lunghezza
l1=0.196
err_l1=0.001/np.sqrt(12)



#csv1
o_t1=df1['Time']/100000
v1=df1['Volt']/1000
err_o_t1=0.002/np.sqrt(12)

tin1=o_t1[147]
tfin1=o_t1[589]
t1=tfin1-tin1
err_t1=np.sqrt(2)*err_o_t1
print('Periodo 1: {:} +- {:} s'.format(t1, err_t1))
tin12=o_t1[589]
tfin12=o_t1[1029]
t12=(tfin12-tin12)
print('Periodo 2: {:} +- {:} s'.format(t12, err_t1))



#csv2
o_t2=df2['Time']/100000
v2=df2['Volt']/1000
err_o_t2=0.002/np.sqrt(12)

tin2=o_t2[141]
tfin2=o_t2[588]
t2=(tfin2-tin2)
err_t2=np.sqrt(2)*err_o_t2
print('Periodo 3: {:} +- {:} s'.format(t2, err_t2))
tin22=o_t2[588]
tfin22=o_t2[1034]
t22=(tfin22-tin22)
print('Periodo 4: {:} +- {:} s'.format(t22, err_t2))



#csv3
o_t3=df3['Time']/100000
v3=df3['Volt']/1000
err_o_t3=0.002/np.sqrt(12)

tin3=o_t3[140]
tfin3=o_t3[586]
t3=(tfin3-tin3)
err_t3=np.sqrt(2)*err_o_t3
print('Periodo 5: {:} +- {:} s'.format(t3, err_t3))
tin32=o_t3[586]
tfin32=o_t3[1033]
t32=(tfin32-tin32)
print('Periodo 6: {:} +- {:} s'.format(t32, err_t3))



#csv4
o_t4=df4['Time']/100000
v4=df4['Volt']/1000
err_o_t4=0.002/np.sqrt(12)

tin4=o_t4[141]
tfin4=o_t4[587]
t4=(tfin4-tin4)
err_t4=np.sqrt(2)*err_o_t4
print('Periodo 7: {:} +- {:} s'.format(t4, err_t4))
tin42=o_t4[587]
tfin42=o_t4[1030]
t42=(tfin42-tin42)
print('Periodo 8: {:} +- {:} s'.format(t42, err_t4))



#csv5
o_t5=df5['Time']/100000
v5=df5['Volt']/1000
err_o_t5=0.002/np.sqrt(12)

tin5=o_t5[144]
tfin5=o_t5[585]
t5=(tfin5-tin5)
err_t5=np.sqrt(2)*err_o_t5
print('Periodo 9: {:} +- {:} s'.format(t5, err_t5))
tin52=o_t5[585]
tfin52=o_t5[1026]
t52=(tfin52-tin52)
print('Periodo 10: {:} +- {:} s'.format(t52, err_t5))


#Periodi estratti
per1=np.array([t1, t12 ,t2, t22, t3, t32, t4, t42, t5, t52])
media_per1=np.mean(per1)
sd_per1=np.std(per1)/np.sqrt(10)

print('Periodo medio: ', media_per1, 's')
print('Deviazione standard: ', sd_per1, 's')
print('Errore strumentale (piatto): ', err_o_t1, 's')
print('Lunghezza: ', l1, '+-', err_l1, 'm')

#Realizzazione del grafico (oscilloscopio: riferimento al primo csv)
plt.figure(figsize=(12,4))
plt.plot(o_t1[100:1100], v1[100:1100], color='mediumorchid', marker='.')
plt.title('Segnale acquisito da oscilloscopio: L1, csv1')
plt.tick_params (axis='x', labelsize=16)
plt.tick_params(axis='y', labelsize=16)
plt.xlabel('Tempo [s]', fontsize=16)
plt.ylabel('Voltaggio [V]', fontsize=16)
plt.grid()
plt.show()

#g con calcolo diretto
g1=l1/pow(media_per1/(2*np.pi),2)
err_g1=(pow(2*np.pi,2)*np.sqrt(pow(err_l1/media_per1, 2)+2*pow(l1*sd_per1,2)))/media_per1
print(g1, '+-', err_g1, 'm/s^2')

"""###Lunghezza 2"""

#Accesso ai dati con Drive
url11='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l2/csv1_time.csv'
url22='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l2/csv2_time.csv'
url33='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l2/csv3_time.csv'

df11=pd.read_csv(url11, sep=',', thousands='.')
df22=pd.read_csv(url22, sep=',', thousands='.')
df33=pd.read_csv(url33, sep=',', thousands='.')



#Lunghezza
l2=0.445
err_l2=0.001/np.sqrt(12)



#csv1
o_t11=df11['Time']/100000
v11=df11['Volt']/100000
err_o_t11=0.002/np.sqrt(12)

tin11=o_t11[119]
tfin11=o_t11[387]
t11=(tfin11-tin11)
err_t11=np.sqrt(2)*err_o_t11
print('Periodo 1: {:} +- {:} s'.format(t11, err_t11))
tin112=o_t11[387]
tfin112=o_t11[653]
t112=(tfin112-tin112)
print('Periodo 2: {:} +- {:} s'.format(t112, err_t11))
tin113=o_t11[653]
tfin113=o_t11[921]
t113=(tfin113-tin113)
print('Periodo 3: {:} +- {:} s'.format(t113, err_t11))



#csv2
o_t22=df22['Time']/100000
v22=df22['Volt']/100000
err_o_t22=0.002/np.sqrt(12)

tin22=o_t22[107]
tfin22=o_t22[374]
t22=(tfin22-tin22)
err_t22=np.sqrt(2)*err_o_t2
print('Periodo 4: {:} +- {:} s'.format(t22, err_t22))
tin222=o_t22[374]
tfin222=o_t22[642]
t222=(tfin222-tin222)
print('Periodo 5: {:} +- {:} s'.format(t222, err_t22))
tin223=o_t22[642]
tfin223=o_t22[910]
t223=(tfin223-tin223)
print('Periodo 6: {:} +- {:} s'.format(t223, err_t22))



#csv3
o_t33=df33['Time']/100000
v33=df33['Volt']/100000
err_o_t33=0.002/np.sqrt(12)

tin33=o_t33[141]
tfin33=o_t33[409]
t33=(tfin33-tin33)
err_t33=np.sqrt(2)*err_o_t33
print('Periodo 7: {:} +- {:} s'.format(t33, err_t33))
tin332=o_t33[409]
tfin332=o_t33[677]
t332=(tfin332-tin332)
print('Periodo 8: {:} +- {:} s'.format(t332, err_t33))
tin333=o_t33[677]
tfin333=o_t33[944]
t333=(tfin333-tin333)
print('Periodo 9: {:} +- {:} s'.format(t333, err_t33))


#Periodo
per2=np.array([t11, t112, t113, t22, t222, t223, t33, t332, t333])
media_per2=np.mean(per2)
sd_per2=np.std(per2)/np.sqrt(19)

print('Periodo medio: ', media_per2, 's')
print('Deviazione standard: ', sd_per2, 's')
print('Errore strumentale (piatto): ', err_o_t1, 's')
print('Lunghezza: ', l2, '+-', err_l2, 'm')

#Realizzazione del grafico (oscilloscopio: riferimento al primo csv)
plt.figure(figsize=(12,4))
plt.plot(o_t11[60:1100], v11[60:1100], color='springgreen', marker='.')
plt.title('Segnale acquisito da oscilloscopio: L2, csv1')
plt.tick_params (axis='x', labelsize=16)
plt.tick_params (axis='y', labelsize=16)
plt.xlabel ('Tempo [s]', fontsize=16)
plt.ylabel('Voltaggio [V]', fontsize=16)
plt.grid()
plt.show()

#g con calcolo diretto
g2=l2/pow(media_per2/(2*np.pi),2)
err_g2=(pow(2*np.pi,2)*np.sqrt(pow(err_l2/media_per2, 2)+2*pow(l2*sd_per2,2)))/media_per2
print(g2, '+-', err_g2, 'm/s^2')

"""###Lunghezza 3"""

#Accesso ai dati con Drive
url111='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l3/csv1_time.csv'
url222='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l3/csv2_time.csv'
url333='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l3/csv3_time.csv'

df111=pd.read_csv(url111, sep=',', thousands='.')
df222=pd.read_csv(url222, sep=',', thousands='.')
df333=pd.read_csv(url333, sep=',', thousands='.')



#Lunghezza
l3=0.343
err_l3=0.001/np.sqrt(12)



#csv1
o_t111=df111['Time']/100000
v111=df111['Volt']/100000
err_o_t111=0.002/np.sqrt(12)

tin111=o_t111[57]
tfin111=o_t111[294]
t111=(tfin111-tin111)
err_t111=np.sqrt(2)*err_o_t111
print('Periodo 1: {:} +- {:} s'.format(t111, err_t111))
tin1112=o_t111[294]
tfin1112=o_t111[528]
t1112=(tfin1112-tin1112)
print('Periodo 2: {:} +- {:} s'.format(t1112, err_t111))
tin1113=o_t111[528]
tfin1113=o_t111[763]
t1113=(tfin1113-tin1113)
print('Periodo 3: {:} +- {:} s'.format(t1113, err_t111))
tin1114=o_t111[763]
tfin1114=o_t111[998]
t1114=(tfin1114-tin1114)
print('Periodo 4: {:} +- {:} s'.format(t1114, err_t111))


#csv2
o_t222=df222['Time']/100000
v222=df222['Volt']/100000
err_o_t222=0.002/np.sqrt(12)

tin222=o_t222[131]
tfin222=o_t222[366]
t222=(tfin222-tin222)
err_t222=np.sqrt(2)*err_o_t222
print('Periodo 5: {:} +- {:} s'.format(t222, err_t222))
tin2222=o_t222[366]
tfin2222=o_t222[601]
t2222=(tfin2222-tin2222)
print('Periodo 6: {:} +- {:} s'.format(t2222, err_t222))
tin2223=o_t222[601]
tfin2223=o_t222[836]
t2223=(tfin2223-tin2223)
print('Periodo 7: {:} +- {:} s'.format(t2223, err_t222))
tin2224=o_t222[836]
tfin2224=o_t222[1071]
t2224=(tfin2224-tin2224)
print('Periodo 8: {:} +- {:} s'.format(t2224, err_t222))


#csv3
o_t333=df333['Time']/100000
v333=df333['Volt']/100000
err_o_t333=0.002/np.sqrt(12)

tin333=o_t333[88]
tfin333=o_t333[324]
t333=(tfin333-tin333)
err_t333=np.sqrt(2)*err_o_t333
print('Periodo 9: {:} +- {:} s'.format(t333, err_t333))
tin3332=o_t333[324]
tfin3332=o_t333[558]
t3332=(tfin3332-tin3332)
print('Periodo 10: {:} +- {:} s'.format(t3332, err_t333))
tin3333=o_t333[558]
tfin3333=o_t333[793]
t3333=(tfin3333-tin3333)
print('Periodo 11: {:} +- {:} s'.format(t3333, err_t333))
tin3334=o_t333[793]
tfin3334=o_t333[1029]
t3334=(tfin3334-tin3334)
print('Periodo 12: {:} +- {:} s'.format(t3334, err_t333))



#Periodo
per3=np.array([t111,t1112,t1113,t1114,t222,t2222,t2223,t2224,t333,t3332,t3333,t3334])
media_per3=np.mean(per3)
sd_per3=np.std(per3)/np.sqrt(12)

print('Periodo medio: ', media_per3, 's')
print('Deviazione standard: ', sd_per3, 's')
print('Errore strumentale (piatto): ', err_o_t1, 's')
print('Lunghezza: ', l3, '+-', err_l3, 'm')

#Realizzazione del grafico (oscilloscopio: riferimento al primo csv)
plt.figure(figsize=(12,4))
plt.plot(o_t111, v111, color='salmon', marker='.')
plt.title('Segnale acquisito da oscilloscopio: L1, csv1')
plt.tick_params (axis='x', labelsize=16)
plt.tick_params (axis='y', labelsize=16)
plt.xlabel ('Tempo [s]', fontsize=16)
plt.ylabel('Voltaggio [V]', fontsize=16)
plt.grid()
plt.show()

#g con calcolo diretto
g3=l3/pow(media_per3/(2*np.pi),2)
err_g3=(pow(2*np.pi,2)*np.sqrt(pow(err_l3/media_per3, 2)+2*pow(l3*sd_per3,2)))/media_per3
print(g3, '+-', err_g3, 'm/s^2')

"""###Lunghezza 4"""

#Accesso ai dati con Drive
url11111='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l4/csv1_time.csv'
url22222='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l4/csv2_time.csv'
url33333='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l4/csv3_time.csv'
url44444='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l4/csv4_time.csv'
url55555='/content/gdrive/My Drive/UNI FISICA/Laboratorio III/Esperienza_3/oscilloscopio/analisi_errori/l4/csv5_time.csv'

df11111=pd.read_csv(url11111, sep=',', thousands='.')
df22222=pd.read_csv(url22222, sep=',', thousands='.')
df33333=pd.read_csv(url33333, sep=',', thousands='.')
df44444=pd.read_csv(url44444, sep=',', thousands='.')
df55555=pd.read_csv(url55555, sep=',', thousands='.')



#Lunghezza
l4=0.2430
err_l4=0.001/np.sqrt(12)



#csv1
o_t11111=df11111['Time']/100000
v11111=df11111['Volt']/1000
err_o_t11111=0.002/np.sqrt(12)

tin11111=o_t11111[53]
tfin11111=o_t11111[545]
t11111=tfin11111-tin11111
err_t11111=np.sqrt(2)*err_o_t11111
print('Periodo 1: {:} +- {:} s'.format(t11111, err_t11111))
tin111112=o_t11111[545]
tfin111112=o_t11111[1037]
t111112=(tfin111112-tin111112)
print('Periodo 2: {:} +- {:} s'.format(t111112, err_t11111))



#csv2
o_t22222=df22222['Time']/100000
v22222=df22222['Volt']/1000
err_o_t22222=0.002/np.sqrt(12)

tin22222=o_t22222[91]
tfin22222=o_t22222[585]
t22222=(tfin22222-tin22222)
err_t22222=np.sqrt(2)*err_o_t22222
print('Periodo 3: {:} +- {:} s'.format(t22222, err_t22222))
tin222222=o_t22222[585]
tfin222222=o_t22222[1080]
t222222=(tfin222222-tin222222)
print('Periodo 4: {:} +- {:} s'.format(t222222, err_t22222))



#csv3
o_t33333=df33333['Time']/100000
v33333=df33333['Volt']/1000
err_o_t33333=0.002/np.sqrt(12)

tin33333=o_t33333[87]
tfin33333=o_t33333[580]
t33333=(tfin33333-tin33333)
err_t33333=np.sqrt(2)*err_o_t33333
print('Periodo 5: {:} +- {:} s'.format(t33333, err_t33333))
tin333332=o_t33333[580]
tfin333332=o_t33333[1074]
t333332=(tfin333332-tin333332)
print('Periodo 6: {:} +- {:} s'.format(t333332, err_t33333))



#csv4
o_t44444=df44444['Time']/100000
v44444=df44444['Volt']/1000
err_o_t44444=0.002/np.sqrt(12)

tin44444=o_t44444[86]
tfin44444=o_t44444[580]
t44444=(tfin44444-tin44444)
err_t44444=np.sqrt(2)*err_o_t44444
print('Periodo 7: {:} +- {:} s'.format(t44444, err_t44444))
tin444442=o_t44444[580]
tfin444442=o_t44444[1072]
t444442=(tfin444442-tin444442)
print('Periodo 8: {:} +- {:} s'.format(t444442, err_t44444))



#csv5
o_t55555=df55555['Time']/100000
v5=df55555['Volt']/1000
err_o_t55555=0.002/np.sqrt(12)

tin55555=o_t55555[84]
tfin55555=o_t55555[581]
t55555=(tfin55555-tin55555)
err_t55555=np.sqrt(2)*err_o_t55555
print('Periodo 9: {:} +- {:} s'.format(t55555, err_t55555))
tin555552=o_t55555[581]
tfin555552=o_t55555[1075]
t555552=(tfin555552-tin555552)
print('Periodo 10: {:} +- {:} s'.format(t555552, err_t55555))


#Periodi estratti
per4=np.array([t11111, t111112 ,t22222, t222222, t33333, t333332, t44444, t444442, t55555, t555552])
media_per4=np.mean(per4)
sd_per4=np.std(per4)/np.sqrt(10)

print('Periodo medio: ', media_per4, 's')
print('Deviazione standard: ', sd_per4, 's')
print('Errore strumentale (piatto): ', err_o_t1, 's')
print('Lunghezza: ', l4, '+-', err_l4, 'm')

#Realizzazione del grafico (oscilloscopio: riferimento al primo csv)
plt.figure(figsize=(12,4))
plt.plot(o_t11111, v11111, color='darkturquoise', marker='.')
plt.title('Segnale acquisito da oscilloscopio: L4, csv1')
plt.tick_params (axis='x', labelsize=16)
plt.tick_params (axis='y', labelsize=16)
plt.xlabel ('Tempo [s]', fontsize=16)
plt.ylabel('Voltaggio [V]', fontsize=16)
plt.grid()
plt.show()

#g con calcolo diretto
g4=l4/pow(media_per4/(2*np.pi),2)
err_g4=(pow(2*np.pi,2)*np.sqrt(pow(err_l4/media_per4, 2)+2*pow(l4*sd_per4,2)))/media_per4
print(g4, '+-', err_g4, 'm/s^2')

"""##Confronto tra lunghezze: costante"""

#Definizione di array che raccolgono i dati in ordine
l=np.array([l1, l4, l3, l2])
err_l=np.array([err_l1, err_l4, err_l3, err_l2])

per=np.array([media_per1, media_per4, media_per3, media_per2])
err_per=np.array([sd_per1, sd_per4, sd_per3, sd_per2])
#ordinati per periodo crescente


g_exp=np. array ([g1, g4, g3, g2])
err_g_exp=np.array ([err_g1, err_g4, err_g3, err_g2])

l_ord=np.array([l1, l4, l3, l2])
err_l_ord=np.array([err_l1, err_l4, err_l3, err_l2])
#ordinati per lunghezza crescente

#Tabella riassuntiva dei dati estratti
df=pd.DataFrame(columns= ['Lunghezza (m)', 'Periodo (s)', "g (m/s^2)"])
df['Lunghezza (m)']=l
df["Periodo (s)"]=per
df["g (m/s^2)"]=g_exp
df

#Grafico per estrarre g: lineare
plt.figure(figsize=(13,7))
plt.errorbar(l_ord, g_exp, xerr=err_l_ord, yerr=err_g_exp, color='teal', fmt='.')
plt.ylabel('g [$m/s^2$]', fontsize=16)
plt.xlabel('Lunghezza [m]', fontsize=16)
plt.tick_params (axis='x', labelsize=16)
plt.tick_params (axis='y', labelsize=16)
plt.title('g estratti a confronto')
plt.grid()
plt.show()

"""### Retta inclinabile"""

#Fit andamento lineare (ODR) dei dati: mi aspetto intercetta g ed inclinazione nulla
linear_model = odr.Model(funzione_fit)
data = odr.RealData(l_ord, g_exp, sx=err_l_ord, sy=err_g_exp)
linear_odr = odr.ODR(data, linear_model, beta0=[1., 1.])
linear_out = linear_odr.run()
lob=linear_out.beta
lobs=linear_out.sd_beta
g_flat=lob[0]
err_g_flat=lobs[0]

print("Intercetta : ", lob[0], "+-", lobs[0])
print("Coefficiente angolare (atteso = 0) : ", lob[1], "+-", lobs[1])

#Indice di Correlazione Lineare
l_ord_medio = np.mean(l_ord)
g_exp_medio = np.mean(g_exp)
r=np.sum((l_ord-l_ord_medio)*(g_exp-g_exp_medio))/np.sqrt(np.sum((l_ord-l_ord_medio)**2)*np.sum((g_exp-g_exp_medio)**2))
print('Indice di correlazione lineare:', r)

#Test del chi2 per valutare la bontà del fit ODR
dgf=len(l_ord)-2

Oh=g_exp
Eh=funzione_fit(lob, l_ord)
chi2_0=np.sum(pow(Eh-Oh,2)/abs(Eh))
print('Chi2: ', chi2_0)
chi2_0_r= chi2_0/dgf
print ('Chi2 ridotto: ', chi2_0_r)

#Grafico per estrarre g: lineare
plt.figure(figsize=(13,7))
plt.errorbar(l_ord, g_exp, color='teal', xerr=err_l, yerr=err_g_exp, fmt='.', label='Dati estratti sperimentalmente')
plt.plot(l_ord, funzione_fit(lob, l_ord), color='orchid', label='Fit lineare')
plt.ylabel('g [$m/s^2$]', fontsize=16)
plt.xlabel('Lunghezza [m]', fontsize=16)
plt.tick_params (axis='x', labelsize=16)
plt.tick_params (axis='y', labelsize=16)
plt.title('g estratti a confronto')
plt.legend(fontsize=16)
plt.grid()
plt.text(0.19, 9.775, '$\chi^2$ ridotto {:}'.format(round(chi2_0_r, 7)), fontsize=16, color='black', alpha=0.7)
plt.show()

"""### Retta costante"""

# Fit lineare costante
def costante(m,a):
  return a
pnames1=['a']

params1, params1_covariance=optimize.curve_fit(costante, l_ord, g_exp, sigma=err_g_exp, p0=[0])
params1_err = np.sqrt(np.diag(params1_covariance))
for pn1, p1, pe1 in zip(pnames1, params1, params1_err):
  print('Parametri {}: {:>6.3f} + {:>6.3f}'.format(pn1,p1,pe1))

#Indice di Correlazione Lineare
l_ord_medio = np.mean(l_ord)
g_exp_medio = np.mean(g_exp)
r_flat=np.sum((l_ord-l_ord_medio)*(g_exp-g_exp_medio))/np.sqrt(np.sum((l_ord-l_ord_medio)**2)*np.sum((g_exp-g_exp_medio)**2))
print('Indice di correlazione lineare:', r_flat)

#Test del chi2 per valutare la bontà del fit ODR
dgf=len(l_ord)-2

Oh=g_exp
Eh=np.full(len(l_ord), params1[0])
chi2_0=np.sum(pow(Eh-Oh,2)/abs(Eh))
print('Chi2: ', chi2_0)
chi2_0_r_flat= chi2_0/dgf
print ('Chi2 ridotto: ', chi2_0_r_flat)

#Grafico per estrarre g: lineare
plt.figure(figsize=(13,7))
plt.errorbar(l_ord, g_exp, color='teal', xerr=err_l, yerr=err_g_exp, fmt='.', label='Dati estratti sperimentalmente')
plt.plot(l_ord, np.full(len(l_ord), params1[0]), color='orchid', label='Fit lineare')
plt.ylabel('g [$m/s^2$]', fontsize=16)
plt.xlabel('Lunghezza [m]', fontsize=16)
plt.title('g estratti a confronto')
plt.tick_params (axis='x', labelsize=16)
plt.tick_params (axis='y', labelsize=16)
plt.legend(fontsize=16)
plt.grid()
plt.text(0.19, 9.775, '$\chi^2$ ridotto {:}'.format(round(chi2_0_r_flat, 7)), fontsize=16, color='black', alpha=0.7)
plt.show()

"""##Confronto tra lunghezze: retta"""

#Manipolazione dei dati per estrazione lineare successiva: periodo
x=pow(per/(2*np.pi), 2)
err_x= (per*err_per)/(2*np.pi*np.pi)

#Grafico per estrarre g: lineare
plt.figure(figsize=(12, 5))
plt.errorbar(x, l*100, xerr=err_x, yerr=err_l*100, color='teal', fmt='.', markersize=0, elinewidth=1.5)
plt.xlabel('$T^2 / 4 \pi^2 [s^2]$', fontsize=16)
plt.ylabel('Lunghezza [cm]', fontsize=16)
plt.title('Dati sperimentali')
plt.tick_params(axis='x', labelsize=16)
plt.tick_params(axis='y', labelsize=16)
plt.grid()
plt.show()

#Fit andamento lineare (ODR) dei dati
linear_model = odr.Model(funzione_fit)
data = odr.RealData(x, l, sx=err_x, sy=err_l)
linear_odr = odr.ODR(data, linear_model, beta0=[1., 1.])
linear_out = linear_odr.run()
lob1=linear_out.beta
lobs1=linear_out.sd_beta

print("Intercetta A: ", lob1[0], "+-", lobs1[0])
print("Coefficiente angolare B: ", lob1[1], "+-", lobs1[1])

#Indice di Correlazione Lineare
x_medio = np.mean(x)
l_medio = np.mean(l)
r1=np.sum((x-x_medio)*(l-l_medio))/np.sqrt(np.sum((x-x_medio)**2)*np.sum((l-l_medio)**2))
print('Indice di correlazione lineare:', r1)

#Test del chi2 per valutare la bontà del fit ODR
dgf=len(l)-2

Oh=l
Eh=funzione_fit(lob1, x)
chi2_1=np.sum(pow(Eh-Oh,2)/abs(Eh))
print('Chi2: ', chi2_1)
chi2_1_r= chi2_1/dgf
print ('Chi2 ridotto: ', chi2_1_r)

#Grafico per estrarre g: lineare con fit

img, ax = plt.subplots(figsize=(14,7))
plt.plot(x, funzione_fit(lob1, x)*100, color='salmon', label='Fit lineare')
plt.errorbar(x, l*100, xerr=err_x, yerr=err_l*100, color='lightseagreen', label='Dati sperimentali', fmt='.', markersize=0, elinewidth=1.5)
plt.xlabel('$T^2 /4 \pi^2 [s^2]$', fontsize=16)
plt.ylabel('Lunghezza [cm]', fontsize=16)
plt.title('Estrazione andamento lineare')
plt.tick_params(axis='x', labelsize=16)
plt.tick_params(axis='y', labelsize=16)
plt.grid()
plt.legend(fontsize=16)
plt.text(0.040, 20, '$\chi^2$ ridotto {:}'.format(round(chi2_1_r, 7)), fontsize=16, color='black', alpha=0.7)

ins1 = ax.inset_axes([0.03, -0.5, 0.2, 0.3])
ins1.plot(np.append(x, 0.016), funzione_fit(lob1, np.append(x, 0.016))*100, color='salmon', label='Fit lineare')
ins1.errorbar(x, l*100, xerr=err_x, yerr=err_l*100, color='lightseagreen', label='Dati sperimentali', fmt='.', markersize=0)
ins1.tick_params(axis='x', labelsize=10)
ins1.tick_params(axis='y', labelsize=10)
ins1.set_xlim(0.0196, 0.0203)
ins1.set_ylim(19.3, 19.9)
ins1.set_title('l={:}cm'.format(l[0]))
ins1.grid()

ins2 = ax.inset_axes([0.29, -0.5, 0.2, 0.3])
ins2.plot(x, funzione_fit(lob1, x)*100, color='salmon', label='Fit lineare')
ins2.errorbar(x, l*100, xerr=err_x, yerr=err_l*100, color='lightseagreen', label='Dati sperimentali', fmt='.', markersize=0)
ins2.tick_params(axis='x', labelsize=10)
ins2.tick_params(axis='y', labelsize=10)
ins2.set_xlim(0.0244, 0.025)
ins2.set_ylim(24, 24.6)
ins2.set_title('l={:}cm'.format(l[1]))
ins2.grid()

ins3 = ax.inset_axes([0.55, -0.5, 0.2, 0.3])
ins3.plot(x, funzione_fit(lob1, x)*100, color='salmon', label='Fit lineare')
ins3.errorbar(x, l*100, xerr=err_x, yerr=err_l*100, color='lightseagreen', label='Dati sperimentali', fmt='.', markersize=0)
ins3.tick_params(axis='x', labelsize=10)
ins3.tick_params(axis='y', labelsize=10)
ins3.set_xlim(0.0347, 0.0353)
ins3.set_ylim(34, 34.6)
ins3.set_title('l={:}cm'.format(l[2]))
ins3.grid()

ins4 = ax.inset_axes([0.81, -0.5, 0.2, 0.3])
ins4.plot(np.append(x, 0.049), funzione_fit(lob1, np.append(x, 0.049))*100, color='salmon', label='Fit lineare')
ins4.errorbar(x, l*100, xerr=err_x, yerr=err_l*100, color='lightseagreen', label='Dati sperimentali', fmt='.', markersize=0)
ins4.tick_params(axis='x', labelsize=10)
ins4.tick_params(axis='y', labelsize=10)
ins4.set_xlim(0.0450, 0.0457)
ins4.set_ylim(44.2, 44.8)
ins4.set_title('l={:}cm'.format(l[3]))
ins4.grid()

plt.savefig('ciao.jpeg', bbox_inches='tight')
from google.colab import files
files.download('ciao.jpeg')

plt.show()

#Grafico con distribuzione normale mcf
"""
fig, ax = plt.subplots(2,1, figsize=(11,7), gridspec_kw={'height_ratios': [3, 1]}, sharex=True)
fig.subplots_adjust(hspace=0)

ax[0].set_title('Estrazione andamento lineare')
ax[0].errorbar(x, l*100, xerr=err_x, yerr=err_l*100, color='lightseagreen', label='Dati sperimentali', fmt='.')
ax[0].plot(x, funzione_fit(lob1, x)*100, color='salmon', label='Fit lineare')
ax[1].set_xlabel('$T^2 /4 \pi [s^2]$')
ax[0].set_ylabel('Lunghezza [cm]')
ax[0].grid()
ax[0].legend()
ax[0].text(0.041, 20, '$\widetilde \chi^2$ {:}'.format(chi2_1_r), color='black', fontsize=8)

ax[1].scatter(x, (funzione_fit(lob1, x)-l)/err_l, color='red', marker='.')
ax[1].axhline(0, color='darkturquoise')
ax[1].set_ylabel('(Dati-Fit)/Err')
ax[1].tick_params(axis="x")
ax[1].tick_params(axis="y")
ax[1].grid(True, axis='y')

plt.show()
"""

g=lob1[1]
err_g=lobs1[1]
print('Valore di g estratto dal confronto delle varie lunghezze')
print('g = ', g, '+-', err_g, 'm/s')